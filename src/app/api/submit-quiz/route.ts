import { NextRequest, NextResponse } from 'next/server';
import { insertQuizResponse, insertLead } from '@/lib/supabase';
import { storeAIReport, storeMockQuizResponse } from '@/lib/reportStore';
import { generateFallbackReportJSON } from '@/lib/fallbackReportGenerator';
import { generateAIReportWithAgents } from '@/lib/ai-agents';
import { AdvancedReportGenerator } from '@/lib/reportGenerator';
import Anthropic from '@anthropic-ai/sdk';

const anthropic = new Anthropic({
  apiKey: process.env.ANTHROPIC_API_KEY,
});

// Utility function for generating test reports (kept for debugging)
// eslint-disable-next-line @typescript-eslint/no-unused-vars
async function generateTestReport(data: {
  email: string;
  company: string;
  jobTitle: string;
  responses: Record<string, string | string[]>;
  score: number;
}): Promise<string> {
  const bottleneckAnalysis = generateBottleneckAnalysis(data.responses);
  const primaryBottleneck = getPrimaryBottleneck(data.responses);
  
  return `### ‚úÖ Executive Summary

${data.company} operates in the ${data.responses['industry-sector']} sector with ${data.responses['company-size']} revenue scale, facing immediate operational challenges in ${primaryBottleneck.toLowerCase()} processes. With ${data.responses['competitor-reality']?.toString().toLowerCase() || 'moderate competitive pressure'} from market adoption of AI technologies, there's a strategic window of 6-12 months to establish competitive differentiation. Our analysis identifies potential for 25-40% efficiency gains and $2-5M annual cost savings through targeted AI implementation, positioning ${data.company} as an industry leader rather than a follower in digital transformation.

### üìä AI Readiness Score + Benchmark Analysis

**Score: ${data.score}/100**

**What This Score Means for ${data.company}:**
- Industry benchmark comparison for ${data.jobTitle} roles in ${data.responses['industry-sector']} sector
- Specific strengths and critical gaps identified through comprehensive assessment
- Competitive positioning analysis based on current market adoption rates
- Strategic urgency level and competitive advantage window timeline
- Three immediate high-impact opportunities with projected ROI estimates

### üöß Key Bottlenecks Identified

**Primary Operational Challenges:**
${bottleneckAnalysis}

**Impact Assessment:**
- Current productivity loss: 8-12 hours per week per employee on manual tasks
- Annual cost of inefficiency: $1.2-3.8M based on ${data.responses['team-size']?.toString() || 'team size'} and operational overhead
- Competitive disadvantage timeline: 6-9 months to significant market position risk

### üí∞ Estimated Cost Savings & ROI Potential

**Immediate Savings Opportunities:**
- Operational efficiency gains: $850K-2.1M annually through automation of ${primaryBottleneck.toLowerCase()} processes
- Time recovery for strategic work: 15-25 hours per week for leadership team
- Error reduction savings: $320K-680K from improved accuracy and reduced rework
- Competitive advantage capture: $1.8-4.2M additional revenue over 18 months

**Investment Requirements:**
- Phase 1 pilot implementation: $45K-85K (3-6 week deployment)
- Team training and change management: $25K-65K (ongoing 6 months)
- Technology platform and integration: $3K-12K monthly operational cost
- **Total ROI projection: 280-420% return within 12-18 months**

### üî¢ Prioritized Opportunities

**Top 3 Strategic Actions (Impact vs. Effort Analysis)**

**ü•á Priority 1: ${primaryBottleneck} Automation**
- **Action**: Deploy AI-powered automation for ${primaryBottleneck.toLowerCase()} optimization
- **Timeline**: 3-4 weeks implementation with pilot deployment
- **Investment**: $35K-55K total cost including setup and integration
- **Expected ROI**: 35-50% efficiency gain, $420K-750K annual savings
- **Why First**: Addresses primary operational pain point, immediate measurable impact

**ü•à Priority 2: AI Decision Support System**
- **Action**: Implement intelligent analytics and decision support platform
- **Timeline**: 6-10 weeks development and integration
- **Investment**: $65K-95K setup, training, and initial deployment
- **Expected ROI**: 25-40% improvement in decision-making speed and accuracy
- **Why Second**: Builds strategic capability, enables data-driven leadership

**ü•â Priority 3: Customer Experience Enhancement**
- **Action**: Deploy AI-powered customer service and engagement tools
- **Timeline**: 10-14 weeks full deployment with iterative rollout
- **Investment**: $85K-140K platform, integration, and optimization
- **Expected ROI**: 15-25% revenue increase through enhanced customer satisfaction
- **Why Third**: Market differentiation, requires operational foundation from priorities 1 & 2

### üß≠ Recommended Next Steps

1. **Launch a 4-6 week pilot program** focused on automating ${primaryBottleneck.toLowerCase()} processes, targeting 30-45% reduction in manual effort and $25K-40K monthly savings within 8 weeks.

2. **Establish AI governance council** with executive sponsorship (CEO/COO level) to oversee strategic implementation, change management, and ROI measurement across all initiatives.

3. **Complete technical readiness audit** of existing data infrastructure, API capabilities, and integration points to ensure seamless deployment and maximum value extraction.

4. **Engage certified AI implementation partner** for detailed technology selection, vendor negotiations, and 90-day tactical execution roadmap with specific milestones and success metrics.

---

### ‚úÖ Final Note

This report outlines the top opportunities for strategic AI implementation based on your current readiness assessment. For further support or tailored implementation guidance, consult your AI advisor or solutions partner.

---

*This strategic analysis was developed specifically for ${data.company} leadership based on comprehensive assessment responses. Every recommendation includes precise investment requirements, expected outcomes, and implementation timelines tailored to your organization's current capabilities and strategic objectives.*`;
}

// Helper functions for multi-select support
function generateBottleneckAnalysis(responses: Record<string, string | string[]>): string {
  const bottlenecks: string[] = [];
  
  // Handle biggest-time-waster (multi-select)
  const timeWasters = responses['biggest-time-waster'];
  if (Array.isArray(timeWasters)) {
    bottlenecks.push(...timeWasters);
  } else if (typeof timeWasters === 'string') {
    bottlenecks.push(timeWasters);
  }
  
  // Handle current-bottleneck (multi-select)  
  const currentBottlenecks = responses['current-bottleneck'];
  if (Array.isArray(currentBottlenecks)) {
    bottlenecks.push(...currentBottlenecks);
  } else if (typeof currentBottlenecks === 'string') {
    bottlenecks.push(currentBottlenecks);
  }
  
  return bottlenecks.length > 0 
    ? bottlenecks.map(b => `- ${b.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase())}`).join('\n')
    : '- Process inefficiencies requiring immediate attention';
}

function getPrimaryBottleneck(responses: Record<string, string | string[]>): string {
  // Get first bottleneck from biggest-time-waster or current-bottleneck
  const timeWasters = responses['biggest-time-waster'];
  const currentBottlenecks = responses['current-bottleneck'];
  
  let primary = '';
  if (Array.isArray(timeWasters) && timeWasters.length > 0) {
    primary = timeWasters[0];
  } else if (typeof timeWasters === 'string') {
    primary = timeWasters;
  } else if (Array.isArray(currentBottlenecks) && currentBottlenecks.length > 0) {
    primary = currentBottlenecks[0];
  } else if (typeof currentBottlenecks === 'string') {
    primary = currentBottlenecks;
  }
  
  return primary.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase()) || 'operational inefficiencies';
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { email, company, jobTitle, responses, score, language = 'en' } = body;

    // Validate required fields
    if (!email || !company || !jobTitle || !responses || score === undefined) {
      return NextResponse.json(
        { error: 'Missing required fields' },
        { status: 400 }
      );
    }

    // Generate AI report with multi-agent system and robust fallback
    let aiReport = null;
    let reportGenerationMethod = 'none';
    
    // Attempt 1: Generate using Multi-Agent System (PRIORITY 1 - AI FIRST!)
    if (!aiReport && process.env.ANTHROPIC_API_KEY) {
      try {
        console.log('üöÄ Attempting Multi-Agent AI report generation for:', company);
        
        const userContext = {
          email,
          company,
          jobTitle,
          responses,
          score,
          language: language as 'pt' | 'en'
        };
        
        const result = await generateAIReportWithAgents(
          userContext,
          process.env.ANTHROPIC_API_KEY
        );
        
        if (result.success && result.report) {
          aiReport = JSON.stringify(result.report, null, 2);
          reportGenerationMethod = 'multi-agent';
          console.log(`‚úÖ Multi-agent report generated successfully in ${result.executionTime}ms`);
          console.log('üìä Agents used:', result.agentsUsed.join(', '));
        } else {
          console.log('‚ö†Ô∏è Multi-agent system failed, falling back to legacy:', result.error);
          aiReport = null;
        }
      } catch (error) {
        console.error('‚ùå Multi-agent system error:', error);
        aiReport = null;
      }
    }
    
    // Attempt 2: Generate using Legacy Claude API (FALLBACK 1)
    if (!aiReport && process.env.ANTHROPIC_API_KEY) {
      try {
        console.log('ü§ñ Attempting legacy AI report generation for:', company);
        
        aiReport = await generateAIReport({
          email,
          company,
          jobTitle,
          responses,
          score,
          language
        });
        
        if (aiReport && aiReport.length > 100) {
          console.log('‚úÖ Legacy AI report generated successfully, length:', aiReport.length);
          reportGenerationMethod = 'claude-legacy';
          
          // Validate that it's proper JSON
          try {
            JSON.parse(aiReport);
            console.log('‚úÖ Legacy AI report is valid JSON');
          } catch (jsonError) {
            console.log('‚ö†Ô∏è Legacy AI report is not valid JSON, will use as-is:', jsonError);
          }
        } else {
          console.log('‚ö†Ô∏è Legacy AI report generation returned insufficient content');
          aiReport = null;
        }
      } catch (error) {
        console.error('‚ùå Error generating legacy AI report:', error);
        aiReport = null;
      }
    } else if (!aiReport) {
      console.log('‚ö†Ô∏è No Anthropic API key found, skipping Claude generation');
    }
    
    // Attempt 3: Generate using Advanced Report Generator (FALLBACK 2)
    if (!aiReport) {
      try {
        console.log('üîß Generating advanced personalized report as fallback for:', company);
        
        const generator = new AdvancedReportGenerator({
          email,
          company,
          jobTitle,
          score,
          responses
        });
        
        const advancedReport = generator.generateReport();
        aiReport = JSON.stringify(advancedReport, null, 2);
        reportGenerationMethod = 'advanced-generator-fallback';
        console.log('‚úÖ Advanced report generated successfully as fallback');
      } catch (error) {
        console.error('‚ùå Advanced generator fallback error:', error);
        aiReport = null;
      }
    }
    
    // Attempt 4: Generate using fallback system if all methods failed
    if (!aiReport) {
      try {
        console.log('üõ°Ô∏è Generating fallback report for guaranteed content');
        
        aiReport = generateFallbackReportJSON({
          company,
          jobTitle,
          score,
          responses,
          language
        });
        
        if (aiReport) {
          console.log('‚úÖ Fallback report generated successfully, length:', aiReport.length);
          reportGenerationMethod = 'fallback';
        }
      } catch (fallbackError) {
        console.error('‚ùå Error generating fallback report:', fallbackError);
        
        // Last resort: minimal JSON report
        aiReport = JSON.stringify({
          executive_summary: `Relat√≥rio personalizado para ${jobTitle} na ${company}. Score: ${score}/100.`,
          department_challenges: ['An√°lise de desafios identificados'],
          career_impact: {
            personal_productivity: 'Aumento de produtividade',
            team_performance: 'Melhoria da equipe',
            leadership_recognition: 'Reconhecimento em lideran√ßa',
            professional_growth: 'Crescimento profissional'
          },
          quick_wins: {
            month_1_actions: [{ action: 'Implementar IA', impact: 'Resultados r√°pidos' }],
            quarter_1_goals: [{ goal: 'Expandir programa', outcome: 'Sucesso sustentado' }]
          },
          implementation_roadmap: [{
            phase: 'Fase 1',
            duration: '4 semanas',
            description: 'Implementa√ß√£o inicial',
            career_benefit: 'Lideran√ßa em IA'
          }]
        }, null, 2);
        
        reportGenerationMethod = 'minimal';
        console.log('üõ°Ô∏è Generated minimal report as last resort');
      }
    }
    
    console.log('üìä Report generation completed via:', reportGenerationMethod);

    // Insert quiz response into database with robust retry logic
    let result;
    let dbStorageAttempts = 0;
    const maxDbAttempts = 3;
    
    while (dbStorageAttempts < maxDbAttempts) {
      try {
        dbStorageAttempts++;
        console.log(`üíæ Attempting database storage (attempt ${dbStorageAttempts}/${maxDbAttempts})`);
        
        result = await insertQuizResponse({
          email,
          company,
          job_title: jobTitle,
          responses,
          score,
          ai_report: aiReport || undefined
        });
        
        // Verify the report was actually stored
        if (result && (result.ai_report || aiReport)) {
          console.log('‚úÖ Database storage successful for ID:', result.id);
          console.log('üìä Final result has AI report:', !!result.ai_report);
          console.log('üìä AI report length in result:', result.ai_report?.length || 0);
          break;
        } else {
          console.log('‚ö†Ô∏è Database storage succeeded but report seems missing');
          if (dbStorageAttempts === maxDbAttempts) {
            // Force the result to have the report
            result = { ...result, ai_report: aiReport };
          }
        }
      } catch (dbError) {
        console.error(`‚ùå Database storage attempt ${dbStorageAttempts} failed:`, dbError);
        
        if (dbStorageAttempts === maxDbAttempts) {
          // Create a mock result for fallback
          result = {
            id: Date.now(), // Use timestamp as fallback ID
            email,
            company,
            job_title: jobTitle,
            responses,
            score,
            ai_report: aiReport,
            created_at: new Date().toISOString()
          };
          
          console.log('üõ°Ô∏è Created fallback result after DB failures');
        } else {
          // Wait a bit before retrying
          await new Promise(resolve => setTimeout(resolve, 1000));
        }
      }
    }
    
    // Multiple backup strategies to ensure report availability
    if (aiReport && result) {
      // Strategy 1: Store in memory cache
      try {
        console.log('üìù Storing AI report in memory store as backup...');
        storeAIReport(result.id.toString(), aiReport);
        console.log('‚úÖ Report stored in memory store');
      } catch (memoryError) {
        console.error('‚ùå Memory store backup failed:', memoryError);
      }
      
      // Strategy 2: Store in mock database for additional redundancy
      try {
        console.log('üóÉÔ∏è Storing complete result in mock database as redundancy...');
        
        // CRITICAL: Ensure the AI report is included in the mock database
        const completeResult = {
          id: result.id,
          email: result.email,
          company: result.company,
          job_title: result.job_title,
          responses: result.responses,
          score: result.score,
          ai_report: aiReport, // Use the generated report directly
          created_at: result.created_at
        };
        
        console.log('üóÉÔ∏è Mock result has report:', !!completeResult.ai_report, 'length:', completeResult.ai_report?.length || 0);
        
        storeMockQuizResponse(completeResult);
        console.log('‚úÖ Mock database backup completed with AI report');
      } catch (mockError) {
        console.error('‚ùå Mock database backup failed:', mockError);
      }
    }
    
    // Final verification
    const finalReportExists = result?.ai_report || aiReport;
    console.log('üîç Final verification - Report exists:', !!finalReportExists);
    console.log('üîç Report generation method used:', reportGenerationMethod);
    console.log('üîç Report length:', finalReportExists?.length || 0);

    // Insert or update lead
    await insertLead({
      email,
      company,
      job_title: jobTitle,
      score,
      report_generated: true
    });

    return NextResponse.json({
      success: true,
      responseId: result.id,
      score,
      aiReport: result?.ai_report || aiReport, // Ensure we return the report
      reportGenerationMethod, // For debugging
      hasReport: !!(result?.ai_report || aiReport)
    });

  } catch (error) {
    console.error('Error submitting quiz:', error);
    
    // Check if it's a Supabase table not found error
    if (error instanceof Error && error.message.includes('relation') && error.message.includes('does not exist')) {
      return NextResponse.json(
        { 
          error: 'Database tables not found. Please create the Supabase tables first.',
          setupRequired: true,
          setupInstructions: 'Go to Supabase Dashboard > SQL Editor and run the table creation script provided in the console.'
        },
        { status: 503 }
      );
    }
    
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}

// Helper function to clean and validate quiz data
function cleanQuizData(responses: Record<string, string | string[]>) {
  const cleaned: Record<string, string> = {};
  
  // Process type mapping
  const processMap: Record<string, string> = {
    'reporting-analytics': 'relat√≥rios e an√°lises',
    'customer-support': 'atendimento e suporte',
    'document-management': 'gest√£o de documentos',
    'data-entry': 'entrada de dados'
  };
  
  // Error impact mapping
  const errorMap: Record<string, string> = {
    'low-impact': 'baixo impacto',
    'medium-impact': 'm√©dio impacto',
    'high-impact': 'alto impacto',
    'critical-impact': 'impacto cr√≠tico'
  };
  
  // Success metric mapping
  const metricMap: Record<string, string> = {
    'time-reduction': 'redu√ß√£o de 50% no tempo',
    'cost-savings': 'economia de R$ 20k+/m√™s',
    'error-elimination': 'zero erros cr√≠ticos',
    'roi-achievement': 'ROI de 300%+'
  };
  
  // Concern mapping
  const concernMap: Record<string, string> = {
    'data-security': 'seguran√ßa dos dados',
    'team-resistance': 'resist√™ncia da equipe',
    'implementation-failure': 'falha na implementa√ß√£o',
    'roi-concern': 'custo vs benef√≠cio'
  };
  
  // Industry mapping
  const industryMap: Record<string, string> = {
    'technology': 'tecnologia',
    'manufacturing': 'manufatura',
    'healthcare': 'sa√∫de',
    'financial': 'servi√ßos financeiros',
    'retail': 'varejo',
    'services': 'servi√ßos profissionais'
  };
  
  // Clean each field
  Object.entries(responses).forEach(([key, value]) => {
    const strValue = Array.isArray(value) ? value.join(', ') : value?.toString() || '';
    
    switch (key) {
      case 'time-consuming-process':
        cleaned[key] = processMap[strValue] || strValue;
        break;
      case 'process-error-cost':
        cleaned[key] = errorMap[strValue] || strValue;
        break;
      case 'success-metric':
        cleaned[key] = metricMap[strValue] || strValue;
        break;
      case 'biggest-ai-concern':
        cleaned[key] = concernMap[strValue] || strValue;
        break;
      case 'industry-sector':
        cleaned[key] = industryMap[strValue] || strValue;
        break;
      case 'specific-process-description':
        // Keep original description as-is for maximum personalization
        cleaned[key] = strValue;
        break;
      default:
        cleaned[key] = strValue;
    }
  });
  
  return cleaned;
}

async function generateAIReport(data: {
  email: string;
  company: string;
  jobTitle: string;
  responses: Record<string, string | string[]>;
  score: number;
  language?: string;
}) {
  // Clean and validate quiz data first
  const cleanedResponses = cleanQuizData(data.responses);
  
  const languageInstruction = data.language === 'pt' ? 
    'IMPORTANT: Write the entire report in Portuguese (Brazilian Portuguese). All content must be in Portuguese.' : 
    'Write the report in English.';

  const prompt = `You are creating a PREMIUM AI MASTERPLAN that the user will want to save, share, and reference repeatedly. This must be so valuable and specific that they feel confident implementing it immediately.

${languageInstruction}

CLIENT PROFILE:
‚Ä¢ ${data.jobTitle} at ${data.company}
‚Ä¢ AI Readiness: ${data.score}/100 (${data.score >= 80 ? 'Champion Ready' : data.score >= 60 ? 'High Potential' : data.score >= 40 ? 'Emerging Leader' : 'Starting Journey'})
‚Ä¢ Industry: ${cleanedResponses['industry-sector'] || 'geral'}

CRITICAL DATA FOR CALCULATIONS:
‚Ä¢ Process to Automate: ${cleanedResponses['time-consuming-process'] || 'reporting-analytics'}
‚Ä¢ Current Time Waste: ${cleanedResponses['weekly-hours-wasted'] || '40'} hours/week
‚Ä¢ Error Impact: ${cleanedResponses['process-error-cost'] || 'high-impact'}
‚Ä¢ Budget Available: ${cleanedResponses['monthly-budget-available'] || 'R$ 2.000-10.000/m√™s'}
‚Ä¢ Tech Stack: ${cleanedResponses['current-tech-stack'] || 'spreadsheets, crm'}
‚Ä¢ Success Target: ${cleanedResponses['success-metric'] || 'cost-savings'}
‚Ä¢ Timeline Pressure: ${cleanedResponses['implementation-urgency'] || '90 dias'}
‚Ä¢ Team Size: ${cleanedResponses['team-impact-size'] || '21-50 pessoas'}
‚Ä¢ Main Concern: ${cleanedResponses['biggest-ai-concern'] || 'data-security'}

${cleanedResponses['specific-process-description'] ? `
USER'S EXACT PROCESS DESCRIPTION:
"${cleanedResponses['specific-process-description']}"

CRITICAL INSTRUCTIONS:
1. Reference this EXACT process throughout the report
2. Break down the specific steps they mentioned
3. Calculate time savings for EACH step mentioned
4. Recommend tools that automate THESE SPECIFIC tasks
` : ''}

MANDATORY CALCULATIONS (use exact numbers from data):
‚Ä¢ Weekly hours: ${cleanedResponses['weekly-hours-wasted'] || '40'}
‚Ä¢ Hourly cost: R$ 150 (market average for ${cleanedResponses['industry-sector'] || 'business'} professionals)
‚Ä¢ Automation rate: 70% (industry standard for ${cleanedResponses['time-consuming-process'] || 'reporting'})
‚Ä¢ Hours saved weekly = ${cleanedResponses['weekly-hours-wasted'] || '40'} √ó 0.7 = ${Math.round((parseInt(cleanedResponses['weekly-hours-wasted'] || '40') * 0.7))}
‚Ä¢ Monthly savings = ${Math.round((parseInt(cleanedResponses['weekly-hours-wasted'] || '40') * 0.7))} √ó 4 √ó R$150 = R$ ${(Math.round((parseInt(cleanedResponses['weekly-hours-wasted'] || '40') * 0.7)) * 4 * 150).toLocaleString('pt-BR')}

SPECIFIC TOOL RECOMMENDATIONS FOR THEIR CASE:
Based on: ${cleanedResponses['time-consuming-process']} + ${cleanedResponses['monthly-budget-available']} + ${cleanedResponses['current-tech-stack']}

Must recommend EXACT tools with prices in BRL:
‚Ä¢ Primary tool: [Name + exact monthly cost in R$]
‚Ä¢ Integration tool: [Name + exact cost]
‚Ä¢ Training/Support: [Specific approach + cost]

SUCCESS METRIC FOCUS:
They want: ${cleanedResponses['success-metric']}
So emphasize: ${cleanedResponses['success-metric']?.includes('time') ? 'hours saved' : cleanedResponses['success-metric']?.includes('cost') ? 'R$ saved' : cleanedResponses['success-metric']?.includes('error') ? 'error elimination' : 'ROI percentage'}

TIMELINE ADAPTATION:
They need results in: ${cleanedResponses['implementation-urgency']}
So structure phases as: ${cleanedResponses['implementation-urgency']?.includes('30 dias') ? 'Week 1-2, Week 3-4, Month 2-3' : cleanedResponses['implementation-urgency']?.includes('90 dias') ? 'Month 1, Month 2, Month 3' : 'Quarter 1, Quarter 2, Quarter 3-4'}

ADDRESSING THEIR CONCERN:
Main worry: ${cleanedResponses['biggest-ai-concern']}
Address this EXPLICITLY in quick wins and roadmap phases.

REPORT MUST BE SO GOOD THAT:
1. User immediately sees the value and ROI
2. Feels confident they can implement it
3. Wants to share with their boss
4. Saves it for future reference
5. Books a consultation to go deeper

JSON STRUCTURE (fill with REAL data, no placeholders):

{
  "executive_summary": "Com score ${data.score}/100 e ${cleanedResponses['weekly-hours-wasted']} horas semanais gastas em ${cleanedResponses['time-consuming-process']}, identificamos economia potencial de R$ ${(Math.round((parseInt(cleanedResponses['weekly-hours-wasted'] || '40') * 0.7)) * 4 * 150).toLocaleString('pt-BR')}/m√™s. Automatizando ${cleanedResponses['time-consuming-process']} com ferramentas dentro do or√ßamento de ${cleanedResponses['monthly-budget-available']}, ${data.company} alcan√ßar√° ${cleanedResponses['success-metric']} em ${cleanedResponses['implementation-urgency']}. ROI projetado: ${Math.round(((Math.round((parseInt(cleanedResponses['weekly-hours-wasted'] || '40') * 0.7)) * 4 * 150 - 2000) / 2000) * 100)}% com payback em ${Math.ceil(2000 / (Math.round((parseInt(cleanedResponses['weekly-hours-wasted'] || '40') * 0.7)) * 4 * 150) * 30)} dias.",
  
  "department_challenges": [
    "Processo de ${cleanedResponses['time-consuming-process']} consome ${cleanedResponses['weekly-hours-wasted']} horas/semana da equipe de ${cleanedResponses['team-impact-size']}",
    "Impacto ${cleanedResponses['process-error-cost']} dos erros gera retrabalho estimado em ${parseInt(cleanedResponses['weekly-hours-wasted'] || '40') * 0.2} horas adicionais/semana", 
    "Falta de integra√ß√£o entre ${cleanedResponses['current-tech-stack']} causa duplica√ß√£o de esfor√ßos em ${Math.round(parseInt(cleanedResponses['weekly-hours-wasted'] || '40') * 0.3)} horas/semana",
    "Limita√ß√£o or√ßament√°ria de ${cleanedResponses['monthly-budget-available']} exige solu√ß√µes criativas e escalon√°veis",
    "Preocupa√ß√£o com ${cleanedResponses['biggest-ai-concern']} deve ser endere√ßada com [solu√ß√£o espec√≠fica]"
  ],
  
  "career_impact": {
    "personal_productivity": "Economia de ${Math.round((parseInt(cleanedResponses['weekly-hours-wasted'] || '40') * 0.7))} horas semanais (${Math.round((parseInt(cleanedResponses['weekly-hours-wasted'] || '40') * 0.7) / 40 * 100)}% do tempo) automatizando ${cleanedResponses['time-consuming-process']}. Total anual: ${Math.round((parseInt(cleanedResponses['weekly-hours-wasted'] || '40') * 0.7) * 52)} horas liberadas para atividades estrat√©gicas.",
    "team_performance": "Impacto em ${cleanedResponses['team-impact-size']} com produtividade aumentando ${Math.round((parseInt(cleanedResponses['weekly-hours-wasted'] || '40') * 0.7) / parseInt(cleanedResponses['weekly-hours-wasted'] || '40') * 100)}%. Redu√ß√£o de ${cleanedResponses['process-error-cost']?.includes('critical') ? '95%' : cleanedResponses['process-error-cost']?.includes('high') ? '85%' : '70%'} nos erros operacionais.",
    "leadership_recognition": "Entrega de ${cleanedResponses['success-metric']} em ${cleanedResponses['implementation-urgency']} posicionar√° voc√™ como l√≠der em inova√ß√£o. Case documentado para apresentar resultados de R$ ${(Math.round((parseInt(cleanedResponses['weekly-hours-wasted'] || '40') * 0.7)) * 4 * 150 * 12).toLocaleString('pt-BR')}/ano.",
    "professional_growth": "Dom√≠nio de ferramentas IA para ${cleanedResponses['industry-sector']} aumenta valor de mercado em 30-45%. Certifica√ß√µes em [ferramentas espec√≠ficas recomendadas] s√£o altamente valorizadas."
  },
  
  "quick_wins": {
    "month_1_actions": [
      { 
        "action": "Implementar [ferramenta espec√≠fica dentro do or√ßamento ${cleanedResponses['monthly-budget-available']}] para automatizar [parte espec√≠fica do processo descrito]",
        "impact": "Economia imediata de ${Math.round((parseInt(cleanedResponses['weekly-hours-wasted'] || '40') * 0.7) * 0.3)} horas/semana e ROI positivo em ${Math.ceil(2000 / ((Math.round((parseInt(cleanedResponses['weekly-hours-wasted'] || '40') * 0.7)) * 0.3) * 4 * 150) * 30)} dias"
      },
      { 
        "action": "Configurar integra√ß√£o entre [ferramenta IA] e ${cleanedResponses['current-tech-stack']} para eliminar entrada manual de dados",
        "impact": "Redu√ß√£o de ${cleanedResponses['process-error-cost']?.includes('high') || cleanedResponses['process-error-cost']?.includes('critical') ? '90%' : '70%'} nos erros e economia de R$ ${Math.round((Math.round((parseInt(cleanedResponses['weekly-hours-wasted'] || '40') * 0.7)) * 4 * 150) * 0.4).toLocaleString('pt-BR')}/m√™s"
      }
    ],
    "quarter_1_goals": [
      { 
        "goal": "Automatizar 100% do processo de ${cleanedResponses['time-consuming-process']} com [ferramentas espec√≠ficas]",
        "outcome": "Alcan√ßar ${cleanedResponses['success-metric']} e economizar R$ ${(Math.round((parseInt(cleanedResponses['weekly-hours-wasted'] || '40') * 0.7)) * 4 * 150).toLocaleString('pt-BR')}/m√™s"
      },
      { 
        "goal": "Resolver preocupa√ß√£o com ${cleanedResponses['biggest-ai-concern']} atrav√©s de [abordagem espec√≠fica]",
        "outcome": "Confian√ßa para escalar solu√ß√£o para ${cleanedResponses['team-impact-size']} com seguran√ßa total"
      }
    ]
  },
  
  "implementation_roadmap": [
    {
      "phase": "Implementa√ß√£o R√°pida",
      "duration": "${cleanedResponses['implementation-urgency']?.includes('30 dias') ? '2-3 semanas' : cleanedResponses['implementation-urgency']?.includes('90 dias') ? '4-6 semanas' : '6-8 semanas'}",
      "description": "Deploy de [ferramenta espec√≠fica] para automatizar ${cleanedResponses['time-consuming-process']} conforme descrito. Integra√ß√£o inicial com ${cleanedResponses['current-tech-stack']}. Treinamento da equipe piloto. Resolu√ß√£o da preocupa√ß√£o com ${cleanedResponses['biggest-ai-concern']} atrav√©s de [medidas espec√≠ficas].",
      "career_benefit": "Resultados mensur√°veis em ${cleanedResponses['implementation-urgency']?.includes('30 dias') ? '2 semanas' : '4 semanas'} para reportar √† lideran√ßa"
    },
    {
      "phase": "Otimiza√ß√£o e Escala", 
      "duration": "${cleanedResponses['implementation-urgency']?.includes('30 dias') ? '4-6 semanas' : cleanedResponses['implementation-urgency']?.includes('90 dias') ? '8-10 semanas' : '12-16 semanas'}",
      "description": "Expans√£o para ${cleanedResponses['team-impact-size']} completa. Automa√ß√£o de [subprocessos espec√≠ficos]. Dashboard de ROI mostrando R$ ${(Math.round((parseInt(cleanedResponses['weekly-hours-wasted'] || '40') * 0.7)) * 4 * 150).toLocaleString('pt-BR')}/m√™s economizados.",
      "career_benefit": "Case documentado com ${Math.round(((Math.round((parseInt(cleanedResponses['weekly-hours-wasted'] || '40') * 0.7)) * 4 * 150 - 2000) / 2000) * 100)}% ROI para apresenta√ß√µes executivas"
    },
    {
      "phase": "Lideran√ßa Organizacional",
      "duration": "${cleanedResponses['implementation-urgency']?.includes('30 dias') ? '2-3 meses' : cleanedResponses['implementation-urgency']?.includes('90 dias') ? '3-4 meses' : '6-8 meses'}", 
      "description": "Centro de excel√™ncia em IA para ${cleanedResponses['industry-sector']}. Expans√£o para processos relacionados. Programa de mentoria interna. Economia anual documentada: R$ ${(Math.round((parseInt(cleanedResponses['weekly-hours-wasted'] || '40') * 0.7)) * 4 * 150 * 12).toLocaleString('pt-BR')}.",
      "career_benefit": "Reconhecimento como principal especialista em IA da ${data.company} e refer√™ncia no setor"
    }
  ]
}

CRITICAL SUCCESS FACTORS:
1. Use EXACT numbers from their data (${cleanedResponses['weekly-hours-wasted']} hours, R$ ${(Math.round((parseInt(cleanedResponses['weekly-hours-wasted'] || '40') * 0.7)) * 4 * 150).toLocaleString('pt-BR')} savings)
2. Reference their SPECIFIC process description throughout
3. Recommend tools within their EXACT budget range
4. Address their MAIN concern (${cleanedResponses['biggest-ai-concern']})
5. Align timeline with their urgency (${cleanedResponses['implementation-urgency']})
6. Make them feel this is THEIR custom plan, not generic advice

RETURN ONLY VALID JSON. No markdown, no explanations, no placeholders.`;

  console.log('üìù Sending prompt to Anthropic API, length:', prompt.length);
  
  const message = await anthropic.messages.create({
    model: 'claude-3-5-sonnet-20241022',
    max_tokens: 8000,
    messages: [{
      role: 'user',
      content: prompt
    }]
  });

  console.log('üì® Received response from Anthropic API');
  const textResult = message.content[0].type === 'text' ? message.content[0].text : null;
  
  if (textResult) {
    console.log('‚úÖ AI response received, length:', textResult.length);
    console.log('üìù First 200 chars of response:', textResult.substring(0, 200));
    
    // Clean the response - remove any markdown formatting or explanations
    let cleanedText = textResult.trim();
    
    // Find JSON boundaries if there's extra text
    const firstBrace = cleanedText.indexOf('{');
    const lastBrace = cleanedText.lastIndexOf('}');
    
    if (firstBrace >= 0 && lastBrace > firstBrace) {
      cleanedText = cleanedText.substring(firstBrace, lastBrace + 1);
      console.log('üßπ Extracted JSON from position', firstBrace, 'to', lastBrace);
    }
    
    try {
      // Parse and validate the JSON response
      const jsonReport = JSON.parse(cleanedText);
      
      // Validate that it has the required structure for department-focused report
      if (jsonReport.executive_summary && jsonReport.department_challenges && 
          jsonReport.career_impact && jsonReport.quick_wins && jsonReport.implementation_roadmap) {
        console.log('‚úÖ JSON report structure validated');
        return JSON.stringify(jsonReport, null, 2);
      } else {
        console.log('‚ùå Invalid JSON structure - missing required sections');
        console.log('Available keys:', Object.keys(jsonReport));
        
        // Create fallback structure with available data
        const fallbackReport = {
          executive_summary: jsonReport.executive_summary || jsonReport.summary || 
            `Como ${data.jobTitle} na ${data.company}, sua pontua√ß√£o de ${data.score}/100 demonstra potencial para liderar a implementa√ß√£o de IA em seu departamento. Esta √© uma oportunidade estrat√©gica para se posicionar como l√≠der em inova√ß√£o, implementar solu√ß√µes que aumentar√£o a efici√™ncia operacional em 25-40%, e estabelecer sua carreira como especialista em transforma√ß√£o digital. O momento √© ideal para tomar a iniciativa e se tornar refer√™ncia em IA dentro da organiza√ß√£o.`,
          
          department_challenges: jsonReport.department_challenges || jsonReport.challenges || [
            'Processos manuais consomem tempo excessivo da equipe, limitando foco em atividades estrat√©gicas',
            'Falta de automa√ß√£o resulta em erros e retrabalho, impactando produtividade e moral da equipe',
            'An√°lise de dados √© feita de forma reativa, perdendo oportunidades de insights proativos',
            'Press√£o por resultados mais r√°pidos sem ferramentas adequadas para acelerar processos',
            'Necessidade de demonstrar inova√ß√£o e lideran√ßa tecnol√≥gica para avan√ßar na carreira'
          ],
          
          career_impact: jsonReport.career_impact || {
            personal_productivity: `Como ${data.jobTitle}, voc√™ ganhar√° 8-12 horas semanais atrav√©s da automa√ß√£o de tarefas repetitivas, permitindo foco em estrat√©gia de alto n√≠vel e iniciativas que demonstram lideran√ßa vision√°ria dentro da ${data.company}.`,
            team_performance: `Sua equipe experimentar√° aumento de 30-45% na produtividade atrav√©s de ferramentas de IA, melhorando a moral e estabelecendo voc√™ como o l√≠der que transforma departamentos atrav√©s da tecnologia.`,
            leadership_recognition: `Liderar a implementa√ß√£o de IA estabelecer√° voc√™ como inovador na ${data.company}, criando oportunidades de mentoria, projetos cross-funcionais e reconhecimento da diretoria como specialist em transforma√ß√£o digital.`,
            professional_growth: `Desenvolver expertise em IA o tornar√° um profissional altamente valorizado, aumentando suas op√ß√µes de carreira e valor de mercado, al√©m de posicion√°-lo para promo√ß√µes e oportunidades de lideran√ßa s√™nior.`
          },
          
          quick_wins: jsonReport.quick_wins || {
            month_1_actions: [
              { 
                action: 'Implementar ferramentas de IA para automa√ß√£o de tarefas administrativas do departamento', 
                impact: 'Redu√ß√£o imediata de 6-8 horas semanais de trabalho manual, demonstrando valor tang√≠vel da IA' 
              },
              { 
                action: 'Configurar sistema de relat√≥rios automatizados usando IA para an√°lise de dados', 
                impact: 'Insights em tempo real que impressionam stakeholders e aceleram tomada de decis√£o' 
              }
            ],
            quarter_1_goals: [
              { 
                goal: 'Estabelecer programa piloto de IA com m√©tricas claras de sucesso e ROI documentado', 
                outcome: 'Case study interno que sustenta expans√£o e estabelece voc√™ como l√≠der em inova√ß√£o' 
              },
              { 
                goal: 'Treinar equipe em ferramentas de IA e criar processo padronizado de ado√ß√£o', 
                outcome: 'Reconhecimento como mentor e change agent, posicionando para responsabilidades maiores' 
              }
            ]
          },
          
          implementation_roadmap: jsonReport.implementation_roadmap || [
            {
              phase: 'Avalia√ß√£o e Projeto Piloto',
              duration: '4-6 semanas', 
              description: `Como ${data.jobTitle}, voc√™ conduzir√° an√°lise detalhada dos processos departamentais, identificar√° oportunidades de maior impacto, e implementar√° projeto piloto de IA com m√©tricas claras de sucesso.`,
              career_benefit: 'Demonstra capacidade de lideran√ßa estrat√©gica e vis√£o tecnol√≥gica para a alta dire√ß√£o'
            },
            {
              phase: 'Expans√£o e Otimiza√ß√£o',
              duration: '8-12 semanas', 
              description: 'Expandir implementa√ß√£o para todos os processos relevantes, treinar equipe completamente, e estabelecer governan√ßa de IA no departamento.',
              career_benefit: 'Prova habilidades de change management e execution, qualificando para posi√ß√µes s√™nior'
            },
            {
              phase: 'Lideran√ßa Organizacional',
              duration: '3-6 meses', 
              description: 'Tornar-se consultor interno de IA, ajudar outros departamentos, e desenvolver estrat√©gia de longo prazo para toda a organiza√ß√£o.',
              career_benefit: 'Posiciona para promo√ß√£o executiva como especialista em transforma√ß√£o digital'
            }
          ]
        };
        
        console.log('‚úÖ Created fallback report structure');
        return JSON.stringify(fallbackReport, null, 2);
      }
    } catch (error) {
      console.log('‚ùå Failed to parse JSON response:', error);
      console.log('Raw response:', textResult.substring(0, 500));
      
      // As last resort, return the original text but log it for debugging
      return textResult;
    }
  } else {
    console.log('‚ùå No text content in Anthropic response:', message.content[0]);
    return null;
  }
}

// Removed unused helper functions to clean up code